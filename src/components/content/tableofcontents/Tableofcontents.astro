---
import type { MarkdownHeading } from "astro";

interface Props {
  headings: MarkdownHeading[];
}
const { headings } = Astro.props;
---
<nav>
  <ul>
    {
      headings.map((heading: MarkdownHeading) => {
        const {
          depth,
          slug,
          text,
        }: { depth: number; slug: string; text: string } = heading;

        const headingRef: string = `#${slug}`;
        return (
          <li class={`toc-header toc-depth-${depth}`}>
            <a href={headingRef}>{text}</a>
          </li>
        );
      })
    }
  </ul>
</nav>

<script>
  // TODO: FIX THIS. THIS PART IS BROKEN.
  // INTENDED BEHAVIOR: HIGHLIGHT THE HEADER WHOSE SECTION HAS THE MOST CONTENT.
  // TECHNICAL CHALLENGE: WITHOUT REFORMATTING MDX FILES TO HAVE <section> COMPONENTS
  const observerFunction = () => {
    const observer: IntersectionObserver = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {
      let topEntry: IntersectionObserverEntry | null;
      let topEntryId: string | null | undefined;

      entries.forEach((entry: IntersectionObserverEntry) => {
        if (entry.isIntersecting) {
          if (!topEntry) {
            topEntry = entry;
          }
          else if (entry.intersectionRatio > topEntry.intersectionRatio) {
            topEntry = entry;
          } else {
            topEntry = null;
          }
        } 
      })

      topEntryId = topEntry?.target?.getAttribute("id") || null;

      entries.forEach((entry: IntersectionObserverEntry) => {
        const id: string | null = entry.target.getAttribute('id');
        const linkSelector: string = `main nav ul li a[href="#${id}"]`;
        if (topEntryId === id) {
          document.querySelector(linkSelector).parentElement.classList.add('active');
        } else {
          document.querySelector(linkSelector).parentElement.classList.remove('active');
        }
      })
    });

    // Track all sections that have an `id` applied
    document.querySelectorAll('h2[id]').forEach((h2: Element) => {
      observer.observe(h2);
    });
  }

  window.addEventListener('DOMContentLoaded', observerFunction);
</script>


<style>
  nav {
    position: sticky;
    top: 3rem;
    align-self: start;
    display: none;
    margin-right: 1rem;
  }

  ul {
    list-style: none;
  }

  .toc-header a {
    text-decoration: none;
    color: black;
  }

  .toc-depth-1 {
    font-size: 24px;
  }

  .toc-depth-2 {
    font-size: 20px;
    font-weight: 500;
  }

  .toc-depth-3 {
    font-size: 18px;
    margin-left: 1rem;
    font-weight: 400;
  }

  .toc-depth-4 {
    font-size: 16px;
    margin-left: 2rem;
  }

  .toc-depth-5 {
    visibility: hidden;
    height: 0;
  }

  .toc-depth-6 {
    visibility: hidden;
    height: 0;
  }
  
  @media screen and (min-width: 992px) {
    nav {
      display: flex;
      padding: 1rem 0;
    }

    .active a {
      color: blue;
    }

    nav a {
    transition: all 100ms ease-in-out;
}
  }
</style>
