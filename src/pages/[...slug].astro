---
import { getCollection } from "astro:content";
import Post from "../layouts/post/Post.astro";
import TableofContents from "../components/content/tableofcontents/Tableofcontents.astro";
import colors from "../data/colors.json";

const difficultyColor: any = colors.difficulties;
// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const codingChallengeSolutions = await getCollection(
    "programming-challenge-solutions"
  );

  const blogPosts = await getCollection("blog");

  return codingChallengeSolutions.concat(blogPosts).map((entry) => ({
    params: { slug: `${entry.collection}/${entry.slug}` },
    props: { entry },
  }));
}
// 2. When it's time to render, you can get the entry directly from the prop
const { entry } = Astro.props;

const { Content, headings } = await entry.render();
---

<Post title={entry.data.title}>
  <main>
    <TableofContents headings={headings} />
    <article>
      <h1>{entry.data.title}</h1>
      {
        entry.data.src ? (
          <div style="display: flex; flex-direction: column; align-items: start;">
            {entry.data.src.difficulty ? (
              <p
                style={`
                  font-size: 14px;
                  background-color: ${
                    difficultyColor[entry.data.src.difficulty]
                  };
                  padding: 4px 1rem;
                  margin: 0;
                  border-radius: 4px;
                  text-align: center;
                `}
              >
                {entry.data.src.difficulty}
              </p>
            ) : null}
            <p style="margin: 0;">
              ( source:{" "}
              <a href={entry.data.src.url} target="_blank">
                {entry.data.src.domain}
              </a>
              )
            </p>
          </div>
        ) : null
      }
      <Content />
    </article>
  </main>
</Post>

<style>
  main {
    display: flex;
    flex-direction: row;
  }

  article {
    flex: 1;
    max-width: 800px;
    margin: auto;
  }

  @media screen and (min-width: 992px) {
    article {
      width: 80%;
    }
  }
</style>
